{"version":3,"sources":["Messages.js","App.js","reportWebVitals.js","index.js"],"names":["Messages","url","useForm","register","handleSubmit","errors","onSubmit","data","sendMessage","method","headers","body","JSON","stringify","fetch","then","response","json","window","location","reload","useState","toggle","setToggle","messages","setMessages","ActualMessages","class","map","message","src","imageURL","username","subject","created","_id","MessageForm","ref","maxLength","value","autoComplete","text","name","placeholder","render","type","rows","useEffect","result","href","id","onClick","console","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80ef9b7c.chunk.js","sourcesContent":["//react packages used\r\nimport React, { useState, useEffect } from 'react';\r\nimport './Messages.css'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\n\r\n{/*after strugging with the problem input fields losing focus after a single character input, I gave up and used react-hook-form package*/}\r\n{/*input fields were losing focus because parent component re renders after every character input*/}\r\nfunction Messages() {\r\n    \r\n    {/*I originally wanted to make messages and the message form on different files but it seemed easier to put them on one page*/}\r\n    const url = \"https://anon-image-board.herokuapp.com/messages\";\r\n    \r\n    const {register, handleSubmit, errors} = useForm();\r\n    \r\n    {/*onSubmit function that triggers when form is clicked, built in with message form*/}\r\n    const onSubmit = data => {\r\n        const sendMessage = {\r\n            method: 'POST',\r\n            headers: { 'Content-type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        }\r\n        fetch(url, sendMessage)\r\n            .then(response => response.json())\r\n        window.location.reload(false)\r\n    }\r\n    {/*onSubmit, fetch url and accept sendMessage object which has the http post request, reload after sending to json */}\r\n\r\n    {/*toggle hook to handle visiblity of message form*/}\r\n    const [toggle, setToggle] = useState(false);\r\n\r\n    {/*toggler arrow function*/}\r\n    {}\r\n    const toggler = () => {\r\n        toggle ? setToggle(false) : setToggle(true);\r\n        console.log(toggle);\r\n    }\r\n    {/*state of toggle is defaulted to false, if toggler function is called, use function in the hook to update toggle state*/}\r\n    {/*used ternary operator for ease of access*/}\r\n\r\n    {/* messages hook, state stores array of posts, initialize with empty array*/}\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    {/*async function, on mount or unmount, make a get request to json api, then update state of messages with result using function from hook*/}\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(result => {\r\n                setMessages(result);\r\n            })\r\n        }, []);\r\n    {/*if you do not use pass an empty array as the second argument, there will be an infinite loop of get requests */}\r\n    {/*this may create a memmory leak*/}\r\n    \r\n    {/*function that maps the message data from the array*/}\r\n    {/*used bootstrap to map onto a list class and style headings*/}\r\n    function ActualMessages(){\r\n        return(\r\n        <div class=\"container\">\r\n            <div class=\"listed-unstyled\">\r\n            {messages.map((message) => \r\n                <li class=\"media\" key={message._id}>\r\n                    <img class=\"mr-3 mb-3 mt-3\" src={message.imageURL}></img>\r\n                    <div class=\"media-body\">\r\n                        <h5 class=\"mt-2\">Name: {message.username}</h5>\r\n                        <h5>Subject: {message.subject}</h5>\r\n                        <h5>Message:</h5>\r\n                        {message.message}\r\n                        <br />\r\n                    </div>\r\n                    <small>Timestamp: {message.created}</small>\r\n                </li>\r\n            )}\r\n            </div>\r\n        </div>\r\n        )}\r\n    \r\n    {/*the message form*/}  \r\n    {/*used react hooks form to create form*/}\r\n    {/*ref is a keyword from create form package*/}\r\n    {/*onSubmit of the form, handle submit*/}\r\n    {/*has restrictions for the input of each category*/}\r\n    {/*there is an error message that appears if any restrictions are not met*/}\r\n    function MessageForm(){\r\n        return(\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div class=\"form-group\">\r\n                    <label>Username</label>\r\n                    <input \r\n                    ref={register({\r\n                        maxLength: {\r\n                            value: 24,\r\n                            message: \"Username must be less than 25 characters\"\r\n                            }   \r\n                        }\r\n                    )}\r\n                    autoComplete=\"off\"\r\n                    text=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"username\"\r\n                    placeholder=\"Enter a Username (if none is entered, Anon will be used)\"\r\n                    />\r\n                </div>\r\n                <ErrorMessage errors={errors} name=\"username\" render={({ message }) => <p>{message}</p>}/>\r\n                <div class=\"form-group\">\r\n                    <label>Subject</label>\r\n                    <input\r\n                    ref={register({\r\n                        maxLength: {\r\n                            value: 49,\r\n                            message: \"Username must be less than 49 characters\"\r\n                            }   \r\n                        }\r\n                    )}\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    class=\"form-control\" \r\n                    name=\"subject\"\r\n                    placeholder=\"Enter a Subject\"\r\n                    />\r\n                </div>\r\n                <ErrorMessage errors={errors} name=\"subject\" render={({ message }) => <p>{message}</p>}/>\r\n                <div class=\"form-group\">\r\n                    <label>Message</label>\r\n                    <textarea\r\n                    ref={register({\r\n                        maxLength: {\r\n                            value: 499,\r\n                            message: \"Message must be less than 500 characters\"\r\n                            }   \r\n                        }\r\n                    )}\r\n                    autoComplete=\"off\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"message\"\r\n                    placeholder=\"Enter a Message\"\r\n                    rows=\"3\" />\r\n                </div>\r\n                <ErrorMessage errors={errors} name=\"message\" render={({ message }) => <p>{message}</p>}/>\r\n                <div class=\"form-group\">\r\n                    <label>Image URL</label>\r\n                    <input\r\n                    ref={register}\r\n                    autoComplete=\"off\"\r\n                    type=\"URL\"\r\n                    class=\"form-control\"\r\n                    name=\"imageURL\"\r\n                    placeholder=\"Enter an Image URL\"\r\n                    />\r\n                </div>\r\n                <input type=\"submit\" class=\"btn btn-primary mb-3\" />\r\n            </form>\r\n        )\r\n        {/*pseudo submit button*/}\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 class=\"centerText\">\r\n                Welcome to my Full Stack Image Board!\r\n            </h1>\r\n            <h3 class=\"centerText\">\r\n                Created by David Chan, An Aspiring Full Stack Developer{\"\\n\"}\r\n            </h3>\r\n            <h4 class=\"centerText\">\r\n                <a href=\"#\">A Link to My Website</a>\r\n            </h4>\r\n            <h5 class=\"centerText\" id=\"finalTextAtTop\">\r\n                You MUST use a direct image link or the image will be broken. For example, do not use image links that direct you to a website.\r\n            </h5>\r\n            <div class=\"container\">\r\n                <button type=\"button\" class=\"btn btn-info mb-3\" onClick = {() => toggler()}>Show Message Form</button>\r\n                \r\n                    {/*button that toggles visibility of message form, I used a ternary operator with the state of toggle*/}\r\n                    {toggle ? <MessageForm /> : null}\r\n                    \r\n                    {/*messages component*/}\r\n                    <ActualMessages />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;\r\n","//the default react app\nimport React from 'react';\nimport Messages from './Messages.js';\n\nfunction App() {\n  return (\n    <div>\n      <Messages />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//default js file that renders onto the dom\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}